@page "/brands"

@inject NavigationManager navigationManager
@inject SweetAlertService swal
@inject IRepository repository

<h3>Marcas</h3>

<div class="mb-3">
    <a class="btn btn-primary" href="/brands/create">Agregar una marca</a>
    <a class="btn btn-success" href="/principal">Regresar</a>
</div>

<div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">

    <div class="mx-2">
        <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar marca..." @bind-value="Filter" />
    </div>
    <div>
        <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filtrar</button>
        <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Limpiar</button>
    </div>
</div>
<br />

<Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPage" />

@if (Brands is null)
{
    <div class="spinner"/>
}
else
{

    <GenericList MyList="Brands">
@*                <RecordsComplete>
            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-globe"></i> Países 
                        <a class="btn btn-sm btn-primary float-end" href="/brands/create"><i class="oi oi-plus"></i> Adicionar País</a>
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                        <div>
                            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar país..." @bind-value="Filter" />
                        </div>
                        <div class="mx-1">
                            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                        </div>
                    </div>

                           <Pagination CurrentPage="currentPage"
                            TotalPages="totalPages"
                            SelectedPage="SelectedPage" />

*@
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th style="width:450px">Marca</th>
                        <th style="width:150px">Edit/Delete</th>
                    </tr>
              
         
                </thead>
                <tbody>
                    @foreach (var brand in Brands!)
                    {
                        <tr>
                            <td>
                                @brand.Name
                            </td>
                            <td>
                                <a href="/brands/edit/@brand.Id" class="btn btn-warning btn-sm ">"><i class="oi oi-pencil" />Editar</a>
                                <button class="btn btn-danger btn-sm" @onclick=@(() => Delete(brand))>))><i class="oi oi-trash" /> Borrar</button>

                            </td>
                        </tr>
                    }
                </tbody>
            </table>
@*                </div>
            </div>*@
        </Body>
@* </RecordsComplete>*@
    </GenericList>
}
@code {
    public List<Brand>? Brands { get; set; }
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";


    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }


    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/brands?page={page}";
            url2 = $"api/brands/totalPages";
        }
        else
        {
            url1 = $"api/brands?page={page}&filter={Filter}";
            url2 = $"api/brands/totalPages?filter={Filter}";
        }


        var responseHppt = await repository.Get<List<Brand>>(url1);
        var responseHppt2 = await repository.Get<int>(url2);
        Brands = responseHppt.Response!;
        totalPages = responseHppt2.Response!;

    }

    private async Task Delete(Brand brand)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/brands/{brand.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await LoadAsync();
        }


    }

        private async Task CleanFilterAsync()
        {
            Filter = string.Empty;
            await ApplyFilterAsync();
        }

        private async Task ApplyFilterAsync()
        {
            int page = 1;
            await LoadAsync(page);
            await SelectedPage(page);
        }

}

