@page "/plates"

@inject NavigationManager navigationManager
@inject SweetAlertService swal
@inject IRepository repository

<h3>Placas</h3>

<div class="mb-3">
    <a class="btn btn-primary" href="/plates/create">Nueva Placa</a>
</div>
<br />

<Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPage" />

<GenericList MyList="Plates">

    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th style="width:300px">Placas</th>
                    <th style="width:300px">ID Propietario</th>
                    <th style="width:210px">Edit/Delete</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var plate in Plates!)
                {
                    <tr>
                        <td>
                            @plate.Name
                        </td>
                        <td>
                            @plate.Owner
                        </td>
                        <td>
                            <a href="/plates/edit/@plate.Id" class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => Delete(plate))>Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </Body>
 
</GenericList>

@code {
    public List<Plate>? Plates { get; set; }
    private int currentPage = 1;
    private int totalPages;


    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await Load(page);
    }


    private async Task Load(int page = 1)
    {
        string url1 = $"api/plates?page={page}";
        string url2 = $"api/plates/totalPages";

        var responseHppt = await repository.Get<List<Plate>>(url1);
        var responseHppt2 = await repository.Get<int>(url2);
        Plates = responseHppt.Response!;
        totalPages = responseHppt2.Response!;

    }

    private async Task Delete(Plate plate)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/plates/{plate.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }

}

