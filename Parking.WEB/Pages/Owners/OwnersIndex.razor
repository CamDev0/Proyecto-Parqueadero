@page "/owners"
@using Microsoft.AspNetCore.Authorization;
@inject NavigationManager navigationManager
@inject SweetAlertService swal
@inject IRepository repository
@attribute [Authorize(Roles = "Admin")]

<h3>Propietarios</h3>

            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-globe"></i> Propietarios
                        <a class="btn btn-sm btn-outline-success float-end" href="/principal">Regresar</a>
                        <a class="float-end"> . </a>
                        <a class="btn btn-sm btn-outline-primary float-end" href="/owners/create"><i class="oi oi-plus"></i> Agregar Propietario</a>
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                        <div>
                            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar propietario..." @bind-value="Filter" />
                        </div>
                        <div class="mx-1">
                            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                        </div>
                    </div>
                 </div>
            </div>
            <br/>
<Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPage" />

@if (Owners is null)
{
    <div class="spinner"/>
}
else
{
<GenericList MyList="Owners">

    <Body>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th style="width:300px">Propietario</th>
                    <th style="width:300px">Identificación</th>
                    <th style="width:210px">Edit/Delete</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var owner in Owners!)
                {
                    <tr>
                        <td>
                            @owner.Name
                        </td>
                        <td>
                            @owner.IDOwner
                        </td>
                        <td>
                            <a href="/owners/edit/@owner.Id" class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => Delete(owner))>Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>

</GenericList>
}

@code {
    public List<Owner>? Owners { get; set; }
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";



    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await Load(page);
    }


    private async Task Load(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/owners?page={page}";
            url2 = $"api/owners/totalPages";
        }
        else
        {
            url1 = $"api/owners?page={page}&filter={Filter}";
            url2 = $"api/owners/totalPages?filter={Filter}";
        }

        try
        {

            var responseHppt = await repository.Get<List<Owner>>(url1);
            var responseHppt2 = await repository.Get<int>(url2);
            Owners = responseHppt.Response!;
            totalPages = responseHppt2.Response!;
        }
        catch (Exception ex)
        {
            await swal.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }


    }

    private async Task Delete(Owner owner)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/owners/{owner.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }
    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await Load(page);
        await SelectedPage(page);
    }


}

